#include <osgGA/TrackballManipulator>

#include <osgViewer/Viewer>
#include <osgViewer/ViewerEventHandlers>

#include <opencv2/opencv.hpp>

osg::Geode* createPyramid()
{
    osg::Geode* pyramidGeode = new osg::Geode();
    osg::Geometry* pyramidGeometry = new osg::Geometry();
    pyramidGeode->addDrawable(pyramidGeometry);

    // Specify the vertices:
    osg::Vec3Array* pyramidVertices = new osg::Vec3Array;
    pyramidVertices->push_back( osg::Vec3(0, 0, 0) ); // front left
    pyramidVertices->push_back( osg::Vec3(2, 0, 0) ); // front right
    pyramidVertices->push_back( osg::Vec3(2, 2, 0) ); // back right
    pyramidVertices->push_back( osg::Vec3( 0,2, 0) ); // back left
    pyramidVertices->push_back( osg::Vec3( 1, 1,2) ); // peak

    // Associate this set of vertices with the geometry associated with the
    // geode we added to the scene.
    pyramidGeometry->setVertexArray( pyramidVertices );

    // Create a QUAD primitive for the base by specifying the
    // vertices from our vertex list that make up this QUAD:
    osg::DrawElementsUInt* pyramidBase =
            new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
    pyramidBase->push_back(3);
    pyramidBase->push_back(2);
    pyramidBase->push_back(1);
    pyramidBase->push_back(0);

    // Add this primitive to the geometry: pyramidGeometry->addPrimitiveSet(pyramidBase);
    // code to create other faces goes here!
    // (removed to save space, see tutorial two)

    osg::Vec4Array* colors = new osg::Vec4Array;
    colors->push_back(osg::Vec4(1.0f, 0.0f, 0.0f, 1.0f) ); //index 0 red
    colors->push_back(osg::Vec4(0.0f, 1.0f, 0.0f, 1.0f) ); //index 1 green
    colors->push_back(osg::Vec4(0.0f, 0.0f, 1.0f, 1.0f) ); //index 2 blue
    colors->push_back(osg::Vec4(1.0f, 1.0f, 1.0f, 1.0f) ); //index 3 white
    colors->push_back(osg::Vec4(1.0f, 0.0f, 0.0f, 1.0f) ); //index 4 red

    pyramidGeometry->setColorArray(colors);
    pyramidGeometry->setColorBinding(osg::Geometry::BIND_PER_VERTEX);

    // Since the mapping from vertices to texture coordinates is 1:1,
    // we don't need to use an index array to map vertices to texture
    // coordinates. We can do it directly with the 'setTexCoordArray'
    // method of the Geometry class.
    // This method takes a variable that is an array of two dimensional
    // vectors (osg::Vec2). This variable needs to have the same
    // number of elements as our Geometry has vertices. Each array element
    // defines the texture coordinate for the cooresponding vertex in the
    // vertex array.
    osg::Vec2Array* texcoords = new osg::Vec2Array(5);
    (*texcoords)[0].set(0.00f,0.0f); // tex coord for vertex 0
    (*texcoords)[1].set(0.25f,0.0f); // tex coord for vertex 1
    (*texcoords)[2].set(0.50f,0.0f); // ""
    (*texcoords)[3].set(0.75f,0.0f); // ""
    (*texcoords)[4].set(0.50f,1.0f); // ""
    pyramidGeometry->setTexCoordArray(0,texcoords);

    return pyramidGeode;
}

int main(int argc,char * argv[]){

    osg::ArgumentParser arguments(&argc,argv);

    // Create viewer
    osgViewer::Viewer viewer(arguments);
    viewer.setUpViewInWindow(0, 0, 640, 480);
    osg::Image *img = new osg::Image();
    cv::Mat src = cv::imread("/home/jenson/Pictures/linear.jpg");
    img->setImage(src.cols,src.rows,
                  3,GL_RGB,GL_RGB,GL_UNSIGNED_BYTE,src.data,
                  osg::Image::AllocationMode::NO_DELETE,1);
    //创建场景组节点
    osg::Group* root = new osg::Group();
    //osg::TextureRectangle * imageNode = new osg::TextureRectangle(img);
    //创建一个节点
    //osg::Node* node = new osg::Node();
    //root->addChild(imageNode);
    osg::Geode* pyramidGeode = createPyramid();


    osg::Texture2D* KLN89FaceTexture = new osg::Texture2D;
    using namespace osg;
    // protect from being optimized away as static state:
    KLN89FaceTexture->setDataVariance(osg::Object::DYNAMIC);
    KLN89FaceTexture->setDataVariance(Object::DYNAMIC);

    KLN89FaceTexture->setFilter(Texture::MIN_FILTER, Texture::LINEAR_MIPMAP_LINEAR);

    KLN89FaceTexture->setFilter(Texture::MAG_FILTER, Texture::LINEAR);

    KLN89FaceTexture->setWrap(Texture::WRAP_S, Texture::CLAMP);

    KLN89FaceTexture->setWrap(Texture::WRAP_T, Texture::CLAMP);
    // load an image by reading a file:
    // osg::Image* klnFace = osgDB::readImageFile("KLN89FaceB.tga");
//    if (!klnFace)
//    {
//        std::cout << " couldn't find texture, quiting." << std::endl;
//        return -1;
//    }

    // Assign the texture to the image we read from file:
    KLN89FaceTexture->setImage(img);

    osg::StateSet* stateOne = new osg::StateSet();

    // Assign texture unit 0 of our new StateSet to the texture
    // we just created and enable the texture.
    stateOne->setTextureAttributeAndModes
            (0,KLN89FaceTexture,osg::StateAttribute::ON);
    // Associate this state set with the Geode that contains
    // the pyramid:
    pyramidGeode->setStateSet(stateOne);
root->addChild(pyramidGeode);
    viewer.setSceneData(root);
    viewer.realize();
    viewer.run();
    return 0;
}
